digraph topics {
  graph [bgcolor="#102010", color=white, fillcolor="#102010", fontcolor=white, style=filled]
  node [color=white, fillcolor="#204020", fontcolor=white, style=filled]
  node [fillcolor=black]
  edge [color="#408040", fontcolor=white]

  graph [compound=true, splines=ortho, rankdir=LR]
  node [shape=box]
  edge []

  subgraph cluster_concepts {
    label="Basic Concepts"
    types
    [label="What are polymorphic types?\nUnderstanding and using types."]
    classes
    [label="What are type classes?\nUnderstanding and using type classes."]
    monoids
    [label="What are monoids?\nUnderstanding and using monoids."]
    functors
    [label="What are functors?\nUnderstanding and using endofunctors and their variants."]
    applicatives
    [label="What are applicative functors?\nUnderstanding and using applicative functors."]
    monads
    [label="What are monads?\nUnderstanding and using monads."]
    transformers
    [label="What are monad transformers?\nUnderstanding and using monad transformers and classes."]
    foldables
    [label="What are iterators?\nUnderstanding and using foldables and traversables."]
    free
    [label="What are free monads?\nUnderstanding and using free monads."]
    schemes
    [label="What are recursion schemes?\nUnderstanding and using various recursion schemes."]
    lenses [label="What are lenses?\nUnderstanding and using lenses and traversals."]
  }

  types -> classes
  classes -> monoids
  classes -> functors
  monoids -> applicatives
  functors -> applicatives
  applicatives -> monads
  monads -> transformers
  applicatives -> foldables
  monads -> free
  foldables -> schemes
  applicatives -> lenses

  subgraph cluster_theory {
    label="Type Theory and Category Theory"
    algebra [label="What is the algebra of types?\nAdding, multiplying and exponentiating types."]
    calculus [label="Is there a calculus of types?\nDifferentiating and taking the limits of types."]
    inverted [label="Can types be inverted?\nTrying to interpret negative and reciprocal types."]
    lc [label="What is the lambda calculus?\nConstructing a minimal programming language."]
    stlc [label="What is the simply typed lambda calculus?\nAdding simple types to a simple programming language."]
    plc [label="What is the polymorphic lambda calculus?\nAdding more complicated types to a simple programming language."]
    decidable [label="What are the limits of decidable type inference?\nReviewing the Damas--Hindley--Milner type system."]
    linear [label="What are linear types?\nExtending the type system to track the duplication and elimination of values."]
    dependent [label="What are dependent types?\nExtending the type system to allow types to depend on values."]
    foundations [label="Can type theory replace set theory?\nUsing type theory as a foundation of mathematics."]
    correspondence [label="How is programming related to logic?\nExploring the Curry--Howard correspondence."]
    deduction [label="How to write formal proofs?\nUsing natural deduction in practice."]
    induction [label="How to reason about recursive types?\nDeriving induction principles for arbitrary types."]
    totality [label="What are total languages?\nSolving a special case of the halting problem."]
    erasure [label="How to perform type erasure?\nGetting rid of type information during compilation."]
    categories [label="What is the point of category theory?\nGeneralizing types and functions to objects and morphisms."]
  }

  types -> algebra [lhead=cluster_theory]
  algebra -> calculus
  algebra -> inverted
  lc -> stlc
  stlc -> plc
  decidable -> linear
  decidable -> dependent
  dependent -> foundations
  correspondence -> deduction
  deduction -> induction
  decidable -> erasure

  subgraph cluster_application {
    label="Applications"
    parse [label="How to parse streams?\nLooking at `megaparsec` and `Earley`."]
    arrays [label="How to work with arrays?\nLooking at `massiv` and `accelerate`."]
    concurrency [label="How to manage concurrent computations?\nLooking at `async` and `stm`."]
    web [label="How to build web services?\nLooking at `hakyll` and `servant`."]
  }

  monads -> parse [lhead=cluster_application]

  subgraph cluster_design {
    label="Planning and Design"
    design [label="How to design programs?\nApplying design patterns to functional programming."]
    organize [label="How to build large projects?\nOrganizing modules and packages."]
    future [label="Are we done?\nDiscussing the current situation and future directions."]
  }

  transformers -> design [lhead=cluster_design]

  subgraph cluster_implementation {
    label="Implementation Details"
    dictionaries [label="How are type classes created?\nImplementing type classes without type classes."]
    effects [label="How do side effects actually work?\nUncovering the magic of input and output."]
    primitives [label="How does the compiler work?\nLooking at the intermediate languages and their translation."]
    foreign [label="How to interact with other languages?\nUsing the foreign function interface and binary serialization."]
  }

  classes -> dictionaries [lhead=cluster_implementation]
  effects -> primitives
  effects -> foreign

  subgraph cluster_performance {
    label="Performance and Profiling"
    mutable [label="How to write imperative programs?\nUsing mutable variables."]
    evaluation [label="When does evaluation happen?\nUnderstanding laziness and strictness annotations."]
    rewriting [label="How to use rewrite rules?\nUsing laws to improve performance."]
    parallel [label="How to employ multiple cores?\nWriting programs that run in parallel."]
    profiling [label="How to diagnose performance problems?\nProfiling and optimizing programs."]
  }

  monads -> mutable [lhead=cluster_performance]
  evaluation -> profiling

  subgraph cluster_tools {
    label="Tools and Automation"
    exfer [label="How to infer code from types?\nGenerating code with `djinn` and `exference`."]
    refactor [label="How to simplify complicated expressions?\nUsing `pointfree` and `pointful` for refactoring."]
    ux [label="How to improve the user experience?\nConfiguring and customizing `ghc` and `vim`."]
  }

  types -> exfer [lhead=cluster_tools]

  subgraph cluster_tricks {
    label="Party Tricks"
    unsafe [label="How to play with fire?\nAbusing unsafe side effects."]
    arity [label="How to define functions with variable arity?\nImplementing the classic `printf`."]
    continuations [label="How to time travel?\nPlaying with continuations."]
    composition [label="How to reason about function composition?\nDrawing pictures to infer types."]
  }

  effects -> unsafe [lhead=cluster_tricks]
  classes -> arity [lhead=cluster_tricks]
  monads -> continuations [lhead=cluster_tricks]

  graph [bgcolor=black]
}
